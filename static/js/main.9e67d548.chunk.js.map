{"version":3,"sources":["assets/github-backgroud.svg","styles/global.ts","assets/logo.svg","services/api.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["createGlobalStyle","githubBackgroud","api","axios","create","baseURL","Title","styled","h1","Form","form","shade","Error","span","Repositories","div","Dashboard","useState","newRepository","setNewRepository","inputError","setInputError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","value","onChange","e","target","placeholder","type","map","to","full_name","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","params","useRouteMatch","setRepository","issues","setIssues","then","stargazers_count","forks_count","open_issues_count","issue","html_url","title","user","id","Routes","path","exact","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e67d548.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github-backgroud.6432b1bf.svg\";","import { createGlobalStyle } from 'styled-components';\r\nimport githubBackgroud from '../assets/github-backgroud.svg';\r\n\r\nexport default createGlobalStyle`\r\n  * {\r\n    margin:0;\r\n    padding: 0;\r\n    outline: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  body {\r\n    background: #F2F2FA url(${githubBackgroud}) no-repeat 70% top;\r\n\r\n  }\r\n\r\n  body, input, button {\r\n    font: 16px Roboto, sans-serif\r\n  }\r\n\r\n  input {\r\n    cursor: pointer;\r\n  }\r\n\r\n  #root {\r\n    max-width: 960px;\r\n    margin: 0 auto;\r\n    padding: 40px 20px\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/logo.6354bf3f.svg\";","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://api.github.com',\r\n});\r\n\r\nexport default api;\r\n","import styled from 'styled-components';\r\nimport { shade } from 'polished';\r\n\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: #3a3a3a;\r\n  max-width: 450px;\r\n  line-height: 56px;\r\n\r\n  margin-top: 80px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  margin-top: 40px;\r\n  max-width: 700px;\r\n  display: flex;\r\n\r\n  input {\r\n    flex: 1;\r\n    height: 70px;\r\n    padding: 0 24px;\r\n    border: 0;\r\n    border-radius: 5px 0 0 5px;\r\n    &::placeholder {\r\n      color: #a8a8b3;\r\n    }\r\n  }\r\n\r\n  button {\r\n    width: 210px;\r\n    height: 70px;\r\n    background: #04d361;\r\n    border-radius: 0px 5px 5px 0px;\r\n    border: 0;\r\n    color: #fff;\r\n    font-weight: bold;\r\n    transition: background-color 0.2s;\r\n\r\n    &:hover {\r\n      background: ${shade(0.2, '#04d361')};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Error = styled.span`\r\n  display: block;\r\n  color: #c53030;\r\n  margin-top: 8px;\r\n`;\r\n\r\nconst Repositories = styled.div`\r\n  margin-top: 80px;\r\n  max-width: 700px;\r\n\r\n  a {\r\n    background: #fff;\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    padding: 24px;\r\n    display: block;\r\n    text-decoration: none;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    transition: transform 0.2s;\r\n\r\n    & + a {\r\n      margin-top: 10px;\r\n    }\r\n    &:hover {\r\n      transform: translateX(10px);\r\n    }\r\n\r\n    img {\r\n      width: 64px;\r\n      height: 64px;\r\n      border-radius: 50px;\r\n    }\r\n\r\n    div {\r\n      margin-left: 16px;\r\n      flex: 1;\r\n      strong {\r\n        font-size: 20px;\r\n        color: #3d3d4d;\r\n      }\r\n\r\n      p {\r\n        font-size: 18px;\r\n        color: #a8a8b3;\r\n        margin-top: 4px;\r\n      }\r\n    }\r\n    svg {\r\n      margin-left: auto;\r\n      color: #cbcbd6;\r\n    }\r\n  }\r\n`;\r\nexport { Title, Form, Error, Repositories };\r\n","import React, { FormEvent, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FiChevronRight } from 'react-icons/fi';\r\nimport logoImg from '../../assets/logo.svg';\r\nimport api from '../../services/api';\r\nimport { Error, Form, Repositories, Title } from './styles';\r\n\r\ninterface Repository {\r\n  full_name: string;\r\n  description: string;\r\n  owner: {\r\n    login: string;\r\n    avatar_url: string;\r\n  };\r\n}\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const [newRepository, setNewRepository] = useState('');\r\n  const [inputError, setInputError] = useState('');\r\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\r\n    const storagedRepositories = localStorage.getItem(\r\n      '@GithubExplorer:repositories',\r\n    );\r\n\r\n    if (storagedRepositories) {\r\n      return JSON.parse(storagedRepositories);\r\n    }\r\n    return [];\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\r\n      '@GithubExplorer:repositories',\r\n      JSON.stringify(repositories),\r\n    );\r\n  }, [repositories]);\r\n\r\n  async function handleAddRepository(\r\n    event: FormEvent<HTMLFormElement>,\r\n  ): Promise<void> {\r\n    event.preventDefault();\r\n    if (!newRepository) {\r\n      setInputError('Digite o autor/repositorio');\r\n      return;\r\n    }\r\n    try {\r\n      const response = await api.get<Repository>(`repos/${newRepository}`);\r\n      const repository = response.data;\r\n\r\n      setRepositories([...repositories, repository]);\r\n      setNewRepository('');\r\n      setInputError('');\r\n    } catch (err) {\r\n      setInputError('Erro na busca por esse repositório');\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <img src={logoImg} alt=\"Github Expore\" />\r\n      <Title>Explore repositórios no Github</Title>\r\n      <Form onSubmit={handleAddRepository}>\r\n        <input\r\n          value={newRepository}\r\n          onChange={e => setNewRepository(e.target.value)}\r\n          placeholder=\"Digite o nome do repositório\"\r\n        />\r\n        <button type=\"submit\">Pesquisar</button>\r\n      </Form>\r\n      {/* funciona como um if */}\r\n      {inputError && <Error>{inputError}</Error>}\r\n      <Repositories>\r\n        {repositories.map((repository: Repository) => (\r\n          <Link\r\n            key={repository.full_name}\r\n            to={`/repositories/${repository.full_name}`}\r\n          >\r\n            <img\r\n              src={repository.owner.avatar_url}\r\n              alt={repository.owner.login}\r\n            />\r\n            <div>\r\n              <strong>{repository.full_name}</strong>\r\n              <p>{repository.description}</p>\r\n            </div>\r\n\r\n            <FiChevronRight size={20} />\r\n          </Link>\r\n        ))}\r\n      </Repositories>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import styled from 'styled-components';\r\n\r\nconst Header = styled.header`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  a {\r\n    display: flex;\r\n    align-items: center;\r\n    text-decoration: none;\r\n    color: #a8a8b3;\r\n\r\n    transition: color 0.2s;\r\n\r\n    &:hover {\r\n      color: #666;\r\n    }\r\n\r\n    svg {\r\n      margin-right: 4px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst RepositoryInfo = styled.section`\r\n  margin-top: 80px;\r\n\r\n  header {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    img {\r\n      width: 120px;\r\n      height: 120px;\r\n      border-radius: 50%;\r\n    }\r\n\r\n    div {\r\n      margin-left: 24px;\r\n\r\n      strong {\r\n        font-size: 36px;\r\n        color: #3d3d4d;\r\n      }\r\n\r\n      p {\r\n        font-size: 18px;\r\n        color: #737380;\r\n        margin-top: 4px;\r\n      }\r\n    }\r\n  }\r\n\r\n  ul {\r\n    display: flex;\r\n    list-style: none;\r\n    margin-top: 40px;\r\n\r\n    li {\r\n      & + li {\r\n        margin-left: 80px;\r\n      }\r\n      strong {\r\n        display: block;\r\n        font-size: 36px;\r\n        color: #3d3d4d;\r\n      }\r\n\r\n      span {\r\n        display: block;\r\n        font-size: 36px;\r\n        color: #6c6c80;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Issues = styled.div`\r\n  margin-top: 80px;\r\n\r\n  a {\r\n    background: #fff;\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    padding: 24px;\r\n    display: block;\r\n    text-decoration: none;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    transition: transform 0.2s;\r\n\r\n    & + a {\r\n      margin-top: 10px;\r\n    }\r\n    &:hover {\r\n      transform: translateX(10px);\r\n    }\r\n\r\n    div {\r\n      margin-left: 16px;\r\n      flex: 1;\r\n      strong {\r\n        font-size: 20px;\r\n        color: #3d3d4d;\r\n      }\r\n\r\n      p {\r\n        font-size: 18px;\r\n        color: #a8a8b3;\r\n        margin-top: 4px;\r\n      }\r\n    }\r\n    svg {\r\n      margin-left: auto;\r\n      color: #cbcbd6;\r\n    }\r\n  }\r\n`;\r\n\r\nexport { Header, RepositoryInfo, Issues };\r\n","import React, { useEffect, useState } from 'react';\r\nimport { FiChevronLeft } from 'react-icons/fi';\r\nimport { Link, useRouteMatch } from 'react-router-dom';\r\nimport logoImg from '../../assets/logo.svg';\r\nimport { Header, RepositoryInfo, Issues } from './styles';\r\nimport api from '../../services/api';\r\n\r\ninterface RepositoryParams {\r\n  repository: string;\r\n}\r\n\r\ninterface Repository {\r\n  full_name: string;\r\n  description: string;\r\n  stargazers_count: number;\r\n  forks_count: number;\r\n  open_issues_count: number;\r\n  owner: {\r\n    login: string;\r\n    avatar_url: string;\r\n  };\r\n}\r\n\r\ninterface Issue {\r\n  id: string;\r\n  title: string;\r\n  html_url: string;\r\n  user: {\r\n    login: string;\r\n  };\r\n}\r\n\r\nconst Repository: React.FC = () => {\r\n  const { params } = useRouteMatch<RepositoryParams>();\r\n  const [repository, setRepository] = useState<Repository | null>(null);\r\n  const [issues, setIssues] = useState<Issue[]>([]);\r\n  useEffect(() => {\r\n    // 1º Metodo para fazer chamada\r\n    api.get(`repos/${params.repository}`).then(response => {\r\n      setRepository(response.data);\r\n    });\r\n    api.get(`repos/${params.repository}/issues`).then(response => {\r\n      setIssues(response.data);\r\n    });\r\n    // async function loadData(): Promise<void> {\r\n    //   // 2º Metodo para fazer chamada\r\n    //   // const repository = await api.get(`repos/${params.repository}`);\r\n    //   // const issues = await api.get(`repos/${params.repository}/issues`);\r\n    //   const [repository, issues] = await Promise.all([\r\n    //     api.get(`repos/${params.repository}`),\r\n    //     api.get(`repos/${params.repository}/issues`),\r\n    //   ]);\r\n    // }\r\n    // loadData();\r\n  }, [params.repository]);\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <img src={logoImg} alt=\"Github Explorer\" />\r\n        <Link to=\"/\">\r\n          <FiChevronLeft size=\"16\" />\r\n          Voltar\r\n        </Link>\r\n      </Header>\r\n\r\n      {repository && (\r\n        <RepositoryInfo>\r\n          <header>\r\n            <img\r\n              src={repository?.owner.avatar_url}\r\n              alt={repository.owner.login}\r\n            />\r\n            <div>\r\n              <strong>{repository.full_name}</strong>\r\n              <p>{repository.description}</p>\r\n            </div>\r\n          </header>\r\n          <ul>\r\n            <li>\r\n              <strong>{repository.stargazers_count}</strong>\r\n              <span>Stars</span>\r\n            </li>\r\n            <li>\r\n              <strong>{repository.forks_count}</strong>\r\n              <span>Forks</span>\r\n            </li>\r\n            <li>\r\n              <strong>{repository.open_issues_count}</strong>\r\n              <span>Issues abertos</span>\r\n            </li>\r\n          </ul>\r\n        </RepositoryInfo>\r\n      )}\r\n\r\n      <Issues>\r\n        {issues.map(issue => (\r\n          <Link key={issue.id} to={issue.html_url}>\r\n            <div>\r\n              <strong>{issue.title}</strong>\r\n              <p>{issue.user.login}</p>\r\n            </div>\r\n\r\n            {/* <FiChevronRight size={20} /> */}\r\n          </Link>\r\n        ))}\r\n      </Issues>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Repository;\r\n","import React from 'react';\r\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\r\n\r\nimport Dashboard from '../pages/Dashboard';\r\nimport Repository from '../pages/Repository';\r\n\r\nconst Routes: React.FC = () => (\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route path=\"/\" exact component={Dashboard} />\r\n      <Route path=\"/repositories/:repository+\" component={Repository} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport GlobalStyle from './styles/global';\r\nimport Routes from './routes';\r\n\r\nconst App: React.FC = () => (\r\n  <>\r\n    <BrowserRouter>\r\n      <Routes />\r\n    </BrowserRouter>\r\n    <GlobalStyle />\r\n  </>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}