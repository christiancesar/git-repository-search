{"version":3,"sources":["assets/github-backgroud.svg","styles/global.ts","assets/logo.svg","services/api.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["createGlobalStyle","githubBackgroud","api","axios","create","baseURL","Title","styled","h1","Form","form","shade","Error","span","Repositories","div","Dashboard","useState","newRepository","setNewRepository","inputError","setInputError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","value","onChange","e","target","placeholder","type","map","to","full_name","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","params","useRouteMatch","setRepository","issues","setIssues","then","stargazers_count","forks_count","open_issues_count","issue","html_url","title","user","id","Routes","path","exact","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.992b11bb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github-backgroud.6432b1bf.svg\";","import { createGlobalStyle } from 'styled-components';\nimport githubBackgroud from '../assets/github-backgroud.svg';\n\nexport default createGlobalStyle`\n  * {\n    margin:0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background: #F2F2FA url(${githubBackgroud}) no-repeat 70% top;\n\n  }\n\n  body, input, button {\n    font: 16px Roboto, sans-serif\n  }\n\n  input {\n    cursor: pointer;\n  }\n\n  #root {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 40px 20px\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/logo.6354bf3f.svg\";","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","import styled from 'styled-components';\nimport { shade } from 'polished';\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: #3a3a3a;\n  max-width: 450px;\n  line-height: 56px;\n\n  margin-top: 80px;\n`;\n\nconst Form = styled.form`\n  margin-top: 40px;\n  max-width: 700px;\n  display: flex;\n\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n    &::placeholder {\n      color: #a8a8b3;\n    }\n  }\n\n  button {\n    width: 210px;\n    height: 70px;\n    background: #04d361;\n    border-radius: 0px 5px 5px 0px;\n    border: 0;\n    color: #fff;\n    font-weight: bold;\n    transition: background-color 0.2s;\n\n    &:hover {\n      background: ${shade(0.2, '#04d361')};\n    }\n  }\n`;\n\nconst Error = styled.span`\n  display: block;\n  color: #c53030;\n  margin-top: 8px;\n`;\n\nconst Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n\n    transition: transform 0.2s;\n\n    & + a {\n      margin-top: 10px;\n    }\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50px;\n    }\n\n    div {\n      margin-left: 16px;\n      flex: 1;\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\nexport { Title, Form, Error, Repositories };\n","import React, { FormEvent, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FiChevronRight } from 'react-icons/fi';\nimport logoImg from '../../assets/logo.svg';\nimport api from '../../services/api';\nimport { Error, Form, Repositories, Title } from './styles';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepository, setNewRepository] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepositories = localStorage.getItem(\n      '@GithubExplorer:repositories',\n    );\n\n    if (storagedRepositories) {\n      return JSON.parse(storagedRepositories);\n    }\n    return [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@GithubExplorer:repositories',\n      JSON.stringify(repositories),\n    );\n  }, [repositories]);\n\n  async function handleAddRepository(\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<void> {\n    event.preventDefault();\n    if (!newRepository) {\n      setInputError('Digite o autor/repositorio');\n      return;\n    }\n    try {\n      const response = await api.get<Repository>(`repos/${newRepository}`);\n      const repository = response.data;\n\n      setRepositories([...repositories, repository]);\n      setNewRepository('');\n      setInputError('');\n    } catch (err) {\n      setInputError('Erro na busca por esse repositório');\n    }\n  }\n  return (\n    <>\n      <img src={logoImg} alt=\"Github Expore\" />\n      <Title>Explore repositórios no Github</Title>\n      <Form onSubmit={handleAddRepository}>\n        <input\n          value={newRepository}\n          onChange={e => setNewRepository(e.target.value)}\n          placeholder=\"Digite o nome do repositório\"\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n      {/* funciona como um if */}\n      {inputError && <Error>{inputError}</Error>}\n      <Repositories>\n        {repositories.map((repository: Repository) => (\n          <Link\n            key={repository.full_name}\n            to={`/repositories/${repository.full_name}`}\n          >\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n\n            <FiChevronRight size={20} />\n          </Link>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nconst Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #a8a8b3;\n\n    transition: color 0.2s;\n\n    &:hover {\n      color: #666;\n    }\n\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\n\nconst RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 24px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #737380;\n        margin-top: 4px;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n      & + li {\n        margin-left: 80px;\n      }\n      strong {\n        display: block;\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      span {\n        display: block;\n        font-size: 36px;\n        color: #6c6c80;\n      }\n    }\n  }\n`;\n\nconst Issues = styled.div`\n  margin-top: 80px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n\n    transition: transform 0.2s;\n\n    & + a {\n      margin-top: 10px;\n    }\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    div {\n      margin-left: 16px;\n      flex: 1;\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\n\nexport { Header, RepositoryInfo, Issues };\n","import React, { useEffect, useState } from 'react';\nimport { FiChevronLeft } from 'react-icons/fi';\nimport { Link, useRouteMatch } from 'react-router-dom';\nimport logoImg from '../../assets/logo.svg';\nimport { Header, RepositoryInfo, Issues } from './styles';\nimport api from '../../services/api';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\ninterface Issue {\n  id: string;\n  title: string;\n  html_url: string;\n  user: {\n    login: string;\n  };\n}\n\nconst Repository: React.FC = () => {\n  const { params } = useRouteMatch<RepositoryParams>();\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [issues, setIssues] = useState<Issue[]>([]);\n  useEffect(() => {\n    // 1º Metodo para fazer chamada\n    api.get(`repos/${params.repository}`).then(response => {\n      setRepository(response.data);\n    });\n    api.get(`repos/${params.repository}/issues`).then(response => {\n      setIssues(response.data);\n    });\n    // async function loadData(): Promise<void> {\n    //   // 2º Metodo para fazer chamada\n    //   // const repository = await api.get(`repos/${params.repository}`);\n    //   // const issues = await api.get(`repos/${params.repository}/issues`);\n    //   const [repository, issues] = await Promise.all([\n    //     api.get(`repos/${params.repository}`),\n    //     api.get(`repos/${params.repository}/issues`),\n    //   ]);\n    // }\n    // loadData();\n  }, [params.repository]);\n\n  return (\n    <>\n      <Header>\n        <img src={logoImg} alt=\"Github Explorer\" />\n        <Link to=\"/git-repository-search/\">\n          <FiChevronLeft size=\"16\" />\n          Voltar\n        </Link>\n      </Header>\n\n      {repository && (\n        <RepositoryInfo>\n          <header>\n            <img\n              src={repository?.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count}</strong>\n              <span>Stars</span>\n            </li>\n            <li>\n              <strong>{repository.forks_count}</strong>\n              <span>Forks</span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count}</strong>\n              <span>Issues abertos</span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      )}\n\n      <Issues>\n        {issues.map(issue => (\n          <Link key={issue.id} to={issue.html_url}>\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n\n            {/* <FiChevronRight size={20} /> */}\n          </Link>\n        ))}\n      </Issues>\n    </>\n  );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/git-repository-search/\" exact component={Dashboard} />\n      <Route path=\"/repositories/:repository+\" component={Repository} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport GlobalStyle from './styles/global';\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <>\n    <BrowserRouter>\n      <Routes />\n    </BrowserRouter>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}